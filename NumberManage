TITLE NumberManage program 
.386
.model small, stdcall
.stack 4096

IntegerMax = 10

.data
prompt1 BYTE "Enter an integer: ",0
prompt2 BYTE "The sum of integers is: ",0
prompt3 BYTE "The largest integer is: ",0
prompt4 BYTE "The smallest integer is: ",0
prompt5 BYTE "Search for a number: ",0
prompt8 BYTE "Keep Searching? (y/n)",0
prompt6 BYTE "Yes",0
prompt7 BYTE "No",0
prompt9 BYTE "Thank You",0

array DWORD IntegerMax DUP(?)
smallestInteger DWORD 0
largestInteger DWORD 0

.code
extern ExitProcess@4 : PROC
extern WriteString@0 : PROC
extern WriteInt@0 : PROC
extern ReadInt@0 : PROC
extern Crlf@0 : PROC
extern Clrscr@0 : PROC
extern DumpMem@0 : PROC
extern ReadChar@0 : PROC 
main PROC 
	call CLrscr@0
	mov esi, OFFSET array 
	mov ecx, IntegerMax
	call IntegerPrompt
	call SummingArray
	call DisplaySum
	mov eax, OFFSET array 
	push eax
	call Largest
	pop eax
	mov eax, OFFSET array 
	push eax
	call Smallest
	pop eax
	mov  eax, OFFSET array
	push eax
	call Searching
	pop  eax
	call Repeating
	Call ExitProcess@4

main ENDP


IntegerPrompt PROC			; Taking input from the user and storing the integers in an array 

pushad;							; Pushing registers 

mov edx, OFFSET prompt1			;Outputting the prompt to the user 

L1: 
	call WriteString@0;
	call ReadInt@0;
	call Crlf@0;		  
	cmp eax, 0
	je L2					;jumping to end proc if 0 is entered 
	mov [esi], eax			;moving input into the adress of esi 
	add esi, 4				;moving to the next space in the array 
	Loop L1

L2:
	popad;					;popping registers 
	ret

IntegerPrompt ENDP

SummingArray PROC			; Summing integers in the array 

push    ecx;
push	esi;
mov		eax,0				; setting eax to zero 

L1:	
	add eax, [esi]		
	add esi,4
	loop L1

L2:
	pop ecx;
	pop esi; 
	ret;

SummingArray ENDP

DisplaySum PROC				;Displaying the sum of the integers in the array 

push edx;
mov edx, OFFSET prompt2			;Displaying the sum to the user 
call WriteString@0
call WriteInt@0
call Crlf@0
pop edx
ret

DisplaySum ENDP
	
Largest PROC ; BUGGY NEEDS WORK 
 push ebp				; saving registers 
 mov ebp, esp;
 push esi;
 push ecx;
 push edx;

 mov esi, [ebp+8]			;moving array address to esi
 mov ecx, [esi]				; moving first element to ecx

 mov ebx,0 

 mov ecx, [esi]
 cmp ecx, ebx		
 jge L1
 mov ecx, ebx

 mov eax, ecx
 call WriteInt@0
 call Crlf@0
 L1:
 mov ebx, ecx
 mov ecx, [esi + 4]		;moving the first element into ecx
 cmp ecx, ebx			
 jge L2
 mov ecx, ebx

L2:
 mov ebx, ecx
 mov ecx, [esi + 8]
 cmp ecx, ebx		
 jge L3
 mov ecx, ebx

L3: 
 mov ebx, ecx
 mov ecx, [esi + 12]
 cmp ecx, ebx		
 jge L4
 mov ecx, ebx

 L4:
 mov ebx, ecx
 mov ecx, [esi + 16]
 cmp ecx, ebx			
 jge L5
 mov ecx, ebx

 L5:
 mov ebx, ecx
 mov ecx, [esi + 20]
 cmp ecx, ebx			
 jge L6
 mov ecx, ebx

 L6:
 mov ebx, ecx
 mov ecx, [esi + 24]
 cmp ecx, ebx			
 jge L7
 mov ecx, ebx

 L7:
 mov ebx, ecx 
 mov ecx, [esi + 28]
 cmp ecx, ebx			
 jge L8
 mov ecx, ebx

 L8:
 mov ebx, ecx 
 mov ecx, [esi + 32]
 cmp ecx, ebx			
 jge L9
 mov ecx, ebx

 L9:
 mov ebx, ecx 
 mov ecx, [esi + 36]
 cmp ecx, ebx			
 jge L10
 mov ecx, ebx

 L10:
 mov eax, ecx 
 mov edx, OFFSET prompt3
 call WriteString@0
 call WriteInt@0 
 call Crlf@0


Done:	

restoring:							;restoring the registers
pop		edx;
pop		ecx;
pop		esi;
pop		ebp;

ret
Largest ENDP 

Smallest PROC 

 push ebp				; saving registers 
 mov ebp, esp;
 push esi;
 push ecx;
 push edx;

 mov esi, [ebp+8]			;moving array address to esi
 mov ecx, [esi]				; moving first element to ecx


 mov ecx, [esi]
 cmp ecx, ebx		
 jbe L1
 mov ecx, ebx

 L1:
 mov ebx, ecx
 mov ecx, [esi + 4]		;moving the first element into ecx
 cmp ecx, ebx			
 jbe L2
 mov ecx, ebx

L2:
mov ebx, ecx
 mov ecx, [esi + 8]
 cmp ecx, ebx		
 jbe L3
 mov ecx, ebx

L3: 
mov ebx, ecx
 mov ecx, [esi + 12]
 cmp ecx, ebx		
 jbe L4
 mov ecx, ebx

 L4:
 mov ebx, ecx
 mov ecx, [esi + 16]
 cmp ecx, ebx			
 jbe L5
 mov ecx, ebx

 L5:
 mov ebx, ecx
 mov ecx, [esi + 20] 
 cmp ecx, ebx			
 jbe L6
 mov ecx, ebx

 L6:
 mov ebx, ecx
 mov ecx, [esi + 24]
 cmp ecx, ebx			
 jbe L7
 mov ecx, ebx

 L7:
 mov ebx, ecx 
 mov ecx, [esi + 28]
 cmp ecx, ebx			
 jbe L8
 mov ecx, ebx

 L8:
 mov ebx, ecx 
 mov ecx, [esi + 32]

 cmp ecx, ebx			
 jbe L9
 mov ecx, ebx

 L9:
 mov ebx, ecx 
 mov ecx, [esi + 36]
 cmp ecx, ebx			
 jbe L10
 mov ecx, ebx

 L10:
 mov eax, ecx 
 mov edx, OFFSET prompt4
 call WriteString@0
 call WriteInt@0 
 call Crlf@0


Done:	

restoring:							;restoring the registers
pop		edx;
pop		ecx;
pop		esi;
pop		ebp;

ret
Smallest  ENDP 

Searching PROC 
 push ebp				; saving registers 
 mov ebp, esp;
 push esi;
 push ecx;
 push edx;
mov edx, OFFSET prompt5
call WriteString@0
Call ReadInt@0
Call Crlf@0



 
  
 mov esi, [ebp+8]			;moving array address to esi
 mov ecx, [esi]				; moving first element to ecx

 mov   ebx, eax 
 mov   eax, ebx
 mov ecx, [esi]
 cmp ecx, eax				;comparing the first element in the array 
 je Found 

 mov ecx, [esi + 4]
 cmp ecx, eax
 je Found
 mov edi, 0
 Yikes:
 add esi, 4
 mov ecx, [esi]
 cmp ecx, eax 
 je Found
 add edi, 1
 cmp edi, 10

 je NotFound
 jmp Yikes


NotFound:
mov edx, OFFSET prompt7				;Saying no
Call WriteString@0
Call Crlf@0
Jmp Done							;Jumping past Found Label

Found:
mov edx, OFFSET prompt6				;Saying yes
Call WriteString@0
Call Crlf@0

Done:	

restoring:							;restoring the registers
pop		edx;
pop		ecx;
pop		esi;
pop		ebp;

ret
Searching ENDP 
	
Repeating PROC						;asks the user if they want to repeat the program, calls the search function if 'y' is entered
Begin:
mov edx, OFFSET prompt8
Call WriteString@0
Call ReadChar@0
Call Crlf@0
cmp al, 'y'				; comparing given char to y
je Search				; jumping past search if y is not entered 
jmp Finish


Search:
mov  eax, OFFSET array
push eax
Call Searching				;calling Search proc to repeat the list search 
pop	 eax 
jmp Begin
Finish: 
ret

Repeating ENDP


Call ExitProcess@4;
End main
